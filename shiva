#!/bin/bash
#
# Writen By: Scott McCarty
# Date: 9/2012
# Email: scott.mccarty@gmail.com
# Version: .5
# Description: Simple mass ssh script using bash background
# functions and sane conifguration files
#
# Copyright (C) 2009 Scott McCarty
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
###############################################################################

set -e

debug() {
    if [ $debug -eq 1 ]
    then
        echo "Debug: $1";
    fi
}

usage() {
    echo ""
    echo "USAGE:"
    echo "    $0 [options] [command]"
    echo "Where options is any of:"
    echo "    A               - Accept all ssh keys"
    echo "    c <file>        - Get config from <file>"
    echo "    f <file>        - Get clients list from <file>"
    echo "    g <group name>  - Get clients list from <group name>"
    echo "    l               - List groups"
    echo "    L <group name>  - List members of group"
    echo "    u <user>        - User to login as (root)" 
    echo "    v               - Verbose"
    echo "    h               - Help"
    echo ""
    exit 1;
}

get_config() {
    if [ -e "/usr/local/etc/$1" ]
    then
        echo "/usr/local/etc/$1"
    elif [ -e ./$1 ]
    then
        echo "$1"
    else
        echo "Could not find: $1" >&2
        exit 1
    fi
}

get_remote_clients_list() {
    # Logic to determine what was passed into shiva: file, groupname, spacecmd groupname

    if [ -e $group_files/$1 ]
    then
        # Found group in local group file
        remote_clients=`cat $group_files/$1 | grep -v ^#`
    elif [ -e $1 ]
    then
        # Found group in manually specified group file
        remote_clients=`cat $1 | grep -v ^#`
    elif [ "$spacecmd_support" = "true" ] && $spacecmd -q --server=$spacecmd_hostname -u $spacecmd_username -p $spacecmd_password group_list | grep $1 
    then
        remote_clients=`$spacecmd -q --server=$spacecmd_hostname -u $spacecmd_username -p $spacecmd_password group_listsystems $1 | sed -e 's/\x1b\[?1034h//'`
    elif [ -e `get_config shiva.list` ]
    then
        # Using default list
        remote_clients=`cat `get_config shiva.list` | grep -v ^#`
    else
        $echo "Could not find a list of servers"
        exit
    fi

}

init() {

    # Set Defaults
    user=root
    remote_clients_file=`get_config shiva.list`
    config_file=`get_config shiva.conf`
    debug=0
    test_mode=0
    source $config_file

    ## Turn on/off options
    option_keychain
    option_scriptlog
    option_spacecmd

    # Get options
    while getopts "Ac:f:u:g:lL:tvh" options; do
        case $options in
            A ) autoaddkeys_support="true";;
            c ) config_file="$OPTARG";source $config_file;;
            f ) get_remote_clients_list $OPTARG;;
            g ) get_remote_clients_list $OPTARG;;
            l ) list_groups;;
            L ) list_members $OPTARG;;
            t ) test_mode=1;;
            u ) user="$OPTARG";;
            v ) debug=1;;
            h ) usage;;
            \? ) usage;;
        esac
    done

    shift $(( OPTIND-1 ))

    ## Determineif command was passed
   if [ "$*" != "" ]
   then 
       export command="$*"
   else
       usage
       exit 1
   fi

    ## Commands
    export PATH="$PATH:/sbin:/bin:/usr/sbin:/usr/bin"
    awk=`which awk`
    grep=`which grep`
    tail=`which tail`
    ps=`which ps`
    sort=`which sort`
    wc=`which wc`
    echo=`which echo`
    cat=`which cat`
    find=`which find`
    mail=`which mail`
    scp=`which scp`
    ssh=`which ssh`
    sshd=`which sshd`
    rm=`which rm`
    mv=`which mv`
    sed=`which sed`
    touch=`which touch`
    mkdir=`which mkdir`
    scriptlog=`which echo`

    # Tunables
    if [ "$autoaddkeys_support" = "true" ]
    then
        ssh_options="$ssh_options -o StrictHostKeyChecking=no"
    else
        ssh_options="$ssh_options"
    fi

    ## Variables
    unsuccessful_list=""
    successful_list=""
    remote_client_number=0
    script_name=`basename $0`
    short_wait=3
    long_wait=3

    # Safe String, Safe Command, Safe Command Output
    export safe_string="${script_name}.${HOSTNAME}.$$.`date +%s`"
    export safe_command="${safe_string}.safe_command"
    export safe_output="${safe_string}.safe_output"

    display_debug

    ## Record start time
    start_time=`date`
}

display_debug() {

    # Debug Output      
    debug "Client List: $remote_clients";
    debug "Command: $command"
    debug "Config: $config_file"
    debug "Email: $email_address"
    debug "Email Support: $email_support"
    debug "Keychain Support: $keychain_support"
    debug "Scriptlog Support: $scriptlog_support"
    debug "Auto Add Keys: $autoaddkeys_support"
    debug "Space Command Support: $spacecmd_support"
    debug "Slots: $max_slots"
}

option_keychain() {

    ## Use keyhain if available
    if [ -e ~/.keychain/$HOSTNAME-sh ]
    then
        source ~/.keychain/$HOSTNAME-sh
        keychain_support="true"
    else
        keychain_support="false"
    fi
}

option_scriptlog() {

    ## Option: Use scriptlog if available
    if which scriptlog &>/dev/null
    then
        export scriptlog=`which scriptlog`
        scriptlog_support="true"
    else
        export scriptlog_echo="`which echo`"
        scriptlog_support="false"
    fi
}

option_spacecmd() {

    ## Option: Use spacecmd if available
    if which spacecmd &>/dev/null
    then
        export spacecmd=`which spacecmd`
        spacecmd_support="true"
    else
        spacecmd_support="false"
    fi
}

list_groups() {

    display_debug

    ls -1 $group_files/
    $spacecmd -q --server=$spacecmd_hostname -u $spacecmd_username -p $spacecmd_password group_list
    exit
}

list_members() {

    display_debug

    if [ -e $group_files/$1 ]
    then
        cat $group_files/$1
    elif $spacecmd -q --server=$spacecmd_hostname -u $spacecmd_username -p $spacecmd_password group_listsystems $1 > /tmp/spacecmd.grouplist \
    && [ `wc -l /tmp/spacecmd.grouplist | awk '{print $1}'` -gt 0 ]
    then
        cat /tmp/spacecmd.grouplist
    else
	echo "Could not find group: $1"
    fi
    exit
}

safe_run() {

    # Just to clean up commands below
    # To prevent collisions, tag almost everything with the remote client name
    rc=$remote_client


    # Run from the tmp command file, because there is problems on different
    # shell/versions/operating systems and quoting.
    $echo $1 >/tmp/$safe_command.$rc
    $scp $ssh_options /tmp/$safe_command.$rc ${user}@${rc}:/tmp/$safe_command.$rc &>/dev/null && \
    $ssh $ssh_options ${user}@${rc} "sh /tmp/$safe_command.$rc" &>/tmp/$safe_output.${rc} && \
    $rm -f /tmp/$safe_command.$rc && \
    $ssh $ssh_options ${user}@${rc} "$rm -f /tmp/$safe_command.$rc"
}

used_slots() {
    ls /tmp/$script_name.$$.*.running 2>/dev/null | wc -l || $echo 0
}

find_open_slot() {

    if  [ `used_slots` -lt "$max_slots" ]
    then
        debug "Found open slot"
        return 0
    else
        debug "Did not find open slot"
        return 1
    fi
}

background_command() {
###############################################################################
# Keep track of start/stop times
###############################################################################

    debug "Started client: $remote_client, Parent: $$"

    $touch /tmp/${script_name}.$$.$remote_client.running

    # Perform
    foreground_command

    # Log time finished
    debug "Finished client: $remote_client, Parent: $$"
}

foreground_command() {

    debug "Running: $command"

    # Keep track of running processes using tmp files
    if safe_run "$command"
    then
        mv /tmp/${script_name}.$$.${remote_client}.running /tmp/${script_name}.$$.${remote_client}.successful
    else
        mv /tmp/${script_name}.$$.${remote_client}.running /tmp/${script_name}.$$.${remote_client}.unsuccessful
    fi
}

job_control() {
###############################################################################
# Use the magic of recursion to try and find an open slot
# May have to fine tune sleep time for bash
###############################################################################

    if find_open_slot
    then
        # If there is an open slot, fire off another job
        background_command &
        sleep $short_wait
    else
        sleep $long_wait
        job_control
    fi
}

wait_jobs() {
###############################################################################
# Use a little magical recurstion to wait for all jobs to finish
###############################################################################

    if  [ `used_slots` -eq "0" ]
    then
        debug "All jobs have completed"
        return 0
    else
        debug "Waiting for running jobs"
        sleep $long_wait
        wait_jobs
    fi
}

main() {

    # Main loop
    for remote_client in $remote_clients
    do
        job_control

        # Check/Calculat results of client
        let "remote_client_number = $remote_client_number + 1"
    done

    # After all jobs have began, wait for final job to finish
    wait_jobs

    # Calculate final end time
    end_time=`date`
}

successful_report() {

        $echo "=== Successful ===" >&3

        for remote_client in $successful_list
        do
            # Standard Error
            $echo $remote_client >&3

            # Standard ouptut
            $echo "=== $remote_client ==="
            $cat /tmp/$safe_output.${remote_client}
            $echo ""
        done
        $echo ""
}

unsuccessful_report() {

        $echo "" >&3
        $echo "=== Unsuccessfulful ===" >&3

        for remote_client in $unsuccessful_list
        do
            $echo $remote_client >&3
        done
        $echo ""
}

report () {


    # Standard Error
    ## Build lists
    for remote_client in $remote_clients
    do
        sleep $short_wait
        if [ -e /tmp/${script_name}.$$.${remote_client}.successful ]
        then
            debug "Adding $remote_client to successful list"
            successful_list="$successful_list $remote_client"
            rm -f /tmp/${script_name}.$$.$remote_client.successful
        else
            debug "Adding $remote_client to unsuccessful list"
            unsuccessful_list="$unsuccessful_list $remote_client"
            rm -f /tmp/${script_name}.$$.$remote_client.unsuccessful
        fi
    done

    # Setup logging
    exec 3>/tmp/${script_name}.$$.tmp

    # Reporting
    $echo "Shiva from $HOSTNAME: Completed, $remote_client_number client(s)" >&3
    $echo "" >&3
    $echo "Start time: $start_time" >&3
    $echo "End time:   $end_time" >&3
    $echo "" >&3

    if [ "$unsuccessful_list" = "" ]
    then
        successful_report
    fi
    if [ "$successful_list" = "" ]
    then
        unsuccessful_report
    fi

    # Send report
    if [ "$email_support" == "true" ]
    then
        $cat /tmp/${script_name}.$$.tmp | $mail -s "Shiva Complete" $email_address
    fi

    $cat /tmp/${script_name}.$$.tmp


    # Safety Net Cleanup
    $rm -f /tmp/${script_name}.$$.*.successful &>/dev/null
    $rm -f /tmp/${script_name}.$$.*.unsuccessful &>/dev/null
    $rm -f /tmp/${script_name}.$$.*.running &>/dev/null
    $rm -f /tmp/${safe_string}.safe_command.* &>/dev/null
    $rm -f /tmp/${safe_string}.safe_output.* &>/dev/null
    $find /tmp/shiva.sh.*.tmp -mmin +120 -exec rm -f {} \; &>/dev/null
}


# main
init $*
main
report
